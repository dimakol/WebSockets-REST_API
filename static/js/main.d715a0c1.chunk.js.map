{"version":3,"sources":["components/ticker/rate/Rate.js","components/ticker/Ticker.js","pages/WebSockets/WebsocketsWithHooks.js","utils/calculations.js","components/table/MyTable.js","components/loader/Loader.js","pages/RestApi/RestApi.js","components/app/App.js","index.js"],"names":["Rate","props","className","style","color","value","Ticker","rates","map","rate","index","key","WebsocketsWithHooks","useState","setRates","stop","setStop","webSocket","useRef","useEffect","connect","current","onopen","event","toogleChannel","err","console","log","data","onmessage","response","JSON","parse","bid","ask","a","async","result","parseFloat","toFixed","rateCalculate","bids","asks","then","previousRate","currentRate","RateObj","generateRateObject","length","undefined","rateObj","onclose","wasClean","error","code","reason","onerror","close","WebSocket","status","JSONObj","channel","send","stringify","Button","variant","onClick","marginBottom","MyTable","Table","id","striped","bordered","hover","responsive","filter","album","userId","title","Loader","Spinner","animation","role","RestApi","setData","isLoading","setIsLoading","isError","setIsError","source","axios","CancelToken","cancelToken","token","isCancel","fetchData","cancel","App","to","exact","path","component","render","document","querySelector"],"mappings":"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","file":"static/js/main.d715a0c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Rate.css';\r\n\r\n/**\r\n * Our rate component consist of value and color\r\n * @param {*} props \r\n */\r\nconst Rate = (props) => {\r\n    return (\r\n        <div className=\"Rate\" style={{color: props.color}}>\r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Rate;","import React from 'react';\r\nimport Rate from '../../components/ticker/rate/Rate';\r\nimport './Ticker.css';\r\n\r\n/**\r\n * Our ticker component\r\n * @param {*} props \r\n */\r\nconst Ticker = (props) => {\r\n    return (\r\n        <div className=\"Ticker\">\r\n            {props.rates.map( (rate, index) => {\r\n                return <Rate key={index}\r\n                             value={rate.value}\r\n                             color={rate.color} />\r\n                } )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Ticker;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Ticker from '../../components/ticker/Ticker';\r\nimport { rateCalculate, generateRateObject } from '../../utils/calculations';\r\n\r\n/**\r\n * Web Socket implementation using React hooks\r\n */\r\nconst WebsocketsWithHooks = () => {\r\n  // Our rates (ticker)\r\n  const [rates, setRates] = useState([]);\r\n  // Our start/stop button state\r\n  const [stop, setStop] = useState(false);\r\n\r\n  // Bitcoin - United States Dollar\r\n  const currencyPair = 'btcusd';\r\n  // Our server address to which we will make web socket connection\r\n  const serverEndPoint = 'wss://ws.bitstamp.net';\r\n  // Consistent WebSocket API connection\r\n  const webSocket = useRef(null);\r\n\r\n  // Socket onopen effect\r\n  useEffect(() => {\r\n    // Connect to websocket\r\n    connect();\r\n    webSocket.current.onopen = (event) => {\r\n      try {\r\n        // Subscribing to a channel by sending JSON message to the server\r\n        toogleChannel(\"subscribe\");\r\n      } catch (err) {\r\n        console.log(\"Got invalid message from websocket on open\", err, event.data);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Socket onmessage effect\r\n  useEffect(() => {\r\n    webSocket.current.onmessage = (event) => {\r\n      // Some response message\r\n      const response = JSON.parse(event.data);\r\n      switch (response.event) {\r\n        case 'data':\r\n          // Calculate the rate by summing the last bid with the last ask and divide it by 2\r\n          rateCalculate(response.data.bids[0][0], response.data.asks[0][0])\r\n            // Generate rate object that includes value and color\r\n            .then( rate => generateRateObject(!rates.length ? undefined : rates[rates.length-1].value, rate))\r\n            // Adding the new rate to previous rates array by using array spread operator.\r\n            .then( rateObj => setRates(rates => [...rates, rateObj]));\r\n          break;\r\n        case 'bts:request_reconnect':\r\n          // Forced reconnection\r\n          connect();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }, [rates]);\r\n\r\n  // Socket onclose effect\r\n  useEffect(() => {\r\n    webSocket.current.onclose = (event) => {\r\n      // Wasn't cleaned \r\n      if (!event.wasClean) {\r\n        console.log({ error: `WebSocket error: ${event.code} ${event.reason}` });\r\n        // Reconnect\r\n        connect();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Socket onerror effect\r\n  useEffect(() => {\r\n    webSocket.current.onerror = (event) => {\r\n      console.log(\"received websocket error\", event);\r\n    }\r\n  }, []);\r\n\r\n  // Unmount\r\n  useEffect(() => () => {\r\n    webSocket.current.close();\r\n  }, [webSocket])\r\n\r\n  // WebSocket connection\r\n  const connect = () => {\r\n    webSocket.current = new WebSocket(serverEndPoint);\r\n  }\r\n\r\n  // Toogle between start and stop states\r\n  const handleButtonClick = () => {\r\n    // Currently running\r\n    if (!stop) {\r\n      toogleChannel(\"unsubscribe\");\r\n      setStop(true);\r\n    }\r\n    // Currently stopped\r\n    else {\r\n      toogleChannel(\"subscribe\");\r\n      setStop(false);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Subscribing\\Unsubscribing from the channel\r\n   * @param {String} status - \"subscribe\" or \"unsubscribe\"\r\n   */\r\n  const toogleChannel = (status) => {\r\n    if (status === \"subscribe\" || status === \"unsubscribe\")\r\n    {\r\n      // JSON object for subscribe\\unsubscribe\r\n      const JSONObj = {\r\n        event: `bts:${status}`,\r\n        data: {\r\n          channel: `order_book_${currencyPair}`\r\n        }\r\n      };\r\n      // subscribe\\unsubscribe to\\from a channel by sending JSON message to the server\r\n      webSocket.current.send(JSON.stringify(JSONObj));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Ticker rates={rates} />\r\n      <Button variant=\"outline-secondary\"\r\n              onClick={handleButtonClick}\r\n              style={{marginBottom: \"20px\"}}>Start/Stop</Button>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default WebsocketsWithHooks;","/**\r\n * Calculate the rate by some formula\r\n * @param {String} bid \r\n * @param {String} ask \r\n */\r\nexport const rateCalculate = async (bid, ask) => {\r\n    try {\r\n        let result = (parseFloat(bid) + parseFloat(ask)) / 2;\r\n        return result.toFixed(2);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate rate object with value and color properties.\r\n * The color of the rate object will be depend by previous rate:\r\n * If current rate is higher than the previous, then the color should be Green.\r\n * If current rate is lower than the previous, then the color should be Red.\r\n * If current rate is the first rate (previous rate is undefined), then the color should be Black.\r\n * @param {Double} previousRate \r\n * @param {Double} currentRate \r\n */\r\nexport const generateRateObject = async (previousRate, currentRate) => {\r\n    try {\r\n        let RateObj = { value: currentRate };\r\n        if (currentRate > previousRate)\r\n            RateObj.color = \"Green\";\r\n        if (currentRate < previousRate)\r\n            RateObj.color = \"Red\";\r\n        if (!previousRate || currentRate === previousRate)\r\n            RateObj.color = \"Black\";\r\n        return RateObj;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport './MyTable.css';\r\n\r\n/**\r\n * Our customized table component\r\n * @param {*} props \r\n */\r\nconst MyTable = (props) => {\r\n\r\n  // Render the body of the table with the data that we got from our API\r\n  const renderTable = () => {\r\n    return props.data.filter( (album, index) => album && index < 10)\r\n                     .map( (album, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          <td>{album.id}</td>\r\n          <td>{album.userId}</td>\r\n          <td>{album.title}</td>\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n      \r\n  return (\r\n    <Table id=\"albums\" striped bordered hover responsive>\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>User ID</th>\r\n          <th>Title</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{renderTable()}</tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default MyTable;","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n/**\r\n * Spinner component aligned to the center of the screen\r\n */\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"page-center\">\r\n      <Spinner animation=\"border\" variant=\"primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MyTable from '../../components/table/MyTable';\r\nimport Loader from '../../components/loader/Loader';\r\nimport './RestApi.css';\r\n\r\n/**\r\n * Our RestApi page\r\n */\r\nconst RestApi = () => {\r\n  // Our url to which we will make http request\r\n  const url = 'https://jsonplaceholder.typicode.com/albums';\r\n  // Our table data\r\n  const [data, setData] = useState([]);\r\n  // Loading indicator\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // Error msg in case the http request failed\r\n\tconst [isError, setIsError] = useState(false);\r\n\r\n  // Using useEffect to retrieve data from an API (similar to componentDidMount in a class)\r\n  useEffect(() => {\r\n    const source = axios.CancelToken.source();\r\n    \r\n    const fetchData = async () => {\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        // Making our HTTP request to the specified url\r\n        const response = await axios(url, {\r\n\t\t\t\t\tcancelToken: source.token\r\n\t\t\t\t});\r\n        // Updating the state with the data we got from the response\r\n        setData(response.data);\r\n      } catch (error) {\r\n        setIsError(true);\r\n        if (axios.isCancel(error)) {\r\n\t\t\t\t\tconsole.log('request cancelled');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n      }\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    // Invoke the async function\r\n    fetchData();\r\n\r\n    // Unmount\r\n    return () => {\r\n      source.cancel();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"RestApi\">\r\n      {\r\n        isError ? <div className=\"page-center\">Something went wrong ...</div> :\r\n        isLoading ? <Loader/>:\r\n        <MyTable data={data}></MyTable>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RestApi;\r\n","import React from 'react';\nimport './App.css';\nimport {Link, Switch, Route} from 'react-router-dom';\n//import Websockets from '../../pages/WebSockets/Websockets'; // WebSockets implementation using React class components\nimport WebsocketsWithHooks from '../../pages/WebSockets/WebsocketsWithHooks';\nimport RestApi from '../../pages/RestApi/RestApi';\n\n/**\n * The main app component\n * Here the routes of the application declared\n */\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Link to='/websocket'>WebSocket</Link>\n      <Link to='/restapi'>RestAPI</Link>\n      <Switch>\n        <Route exact path='/websocket' component={WebsocketsWithHooks}/>\n        <Route exact path='/restapi' component={RestApi}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './components/app/App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nrender(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    document.querySelector('#root')\n  )"],"sourceRoot":""}